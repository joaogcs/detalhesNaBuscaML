const url_api_correios_entrega = "https://api.mercadolibre.com/items/";
const url_api_correios_cep = "/shipping_options?&zip_code=";
const url_api_correios_vendedor = "https://api.mercadolibre.com/users/";

restore_options();

// Restores select box and checkbox state using the preferences
// stored in chrome.storage.
function restore_options() {
  chrome.storage.sync.get(
    {
      CEP: "09530580",
      RUA: "...",
      BAIRRO: "...",
      CIDADE: "...",
      ESTADO: "...",
    },
    /* keep tracking element to know when to start main. (it waits for ads to exist)
		Note: 'load' method does not work with MercadoLivre.com.br, the page has scrips that change elements after loads */
    function (items) {
      let checkElementExist = setInterval(function () {
        if ($(".ui-search-bottom-ads__container").children().length) {
          clearInterval(checkElementExist);
          main(items.CEP);
        }
      }, 100);
    }
  );
}

class Anuncio {
  constructor(id) {
    /* constructor*/
    this.id = id;
    this.titulo = "";
    this.preco = 0;
    this.valor_total_parcelado = this.preco;
    this.vendedor_id = 0;
    this.quantidade_disponivel = 0;
  }
}

class Renderizar {
  static valor_total_parcelado(lista_de_anuncios) {
    // Para cada anuncio
    $(".ui-search-layout > .ui-search-layout__item").each(function () {
      let id = $(this).find("input[name=itemId]").val();
      let anuncio = lista_de_anuncios.find((anuncio) => anuncio.id === id);
      if (
        anuncio &&
        $(this).find(
          "span.ui-search-item__group__element.ui-search-installments.ui-search-color--BLACK"
        ).length
      ) {
        // renderiza o valor total da parcela na tela
        let valor_total_parcelado = document.createElement("span");
        valor_total_parcelado.className = "price-tag-symbol";
        valor_total_parcelado.innerHTML = " = " + anuncio.valor_total_parcelado;
        $(this)
          .find(
            ".ui-search-item__group__element.ui-search-installments.ui-search-color--BLACK"
          )
          .find(".price-tag.ui-search-price__part")
          .after(valor_total_parcelado);
      }
    });
  }
}

class ColetarDaPagina {
  static se_existe_anuncio() {
    if ($(".ui-search-layout > .ui-search-layout__item").length) {
      return true;
    } else {
      return false;
    }
  }

  static get_ids_dos_resultados_da_busca() {
    let lista_de_anuncios = [];
    // Para cada anuncio, coleta o ID
    $(".ui-search-layout > .ui-search-layout__item").each(function () {
      let id = $(this).find("input[name=itemId]").val();
      let anuncio = new Anuncio(id);
      lista_de_anuncios.push(anuncio);
    });
    return lista_de_anuncios;
  }

  static get_valor_total_parcelado_dos_resultados_da_busca(lista_de_anuncios) {
    // Para cada anuncio
    $(".ui-search-layout > .ui-search-layout__item").each(function () {
      // id do anuncio
      let id = $(this).find("input[name=itemId]").val();
      let anuncio = lista_de_anuncios.find((anuncio) => anuncio.id === id);
      // se parcelado com juros, calcula o total
      if (
        $(this).find(
          "span.ui-search-item__group__element.ui-search-installments.ui-search-color--BLACK"
        ).length
      ) {
        //pega o valor da parcela mostrado na tela
        let valor_parcela = (
          parseFloat(
            $(this)
              .find(
                ".ui-search-item__group__element.ui-search-installments.ui-search-color--BLACK"
              )
              .find("span.price-tag-fraction")
              .text()
          ) +
          parseFloat(
            $(this)
              .find(
                ".ui-search-item__group__element.ui-search-installments.ui-search-color--BLACK"
              )
              .find("span.price-tag-cents")
              .text()
          ) /
            100
        ).toFixed(2);
        //pega a quantidade de parcelas mostrado na tela
        let numero_parcelas = parseInt(
          $(this)
            .find(
              ".ui-search-item__group__element.ui-search-installments.ui-search-color--BLACK"
            )
            .text()
            .replace("x", "")
        );
        let valor_total = (valor_parcela * numero_parcelas).toFixed(2);
        anuncio.valor_total_parcelado = valor_total;
      }
    });
    return lista_de_anuncios;
  }
}

class ConectarComAPI {
  static buscar_vendedor(id) {}

  static get_dados_das_entregas(lista_de_anuncios, cep, callback) {
    let ajax_requests = [];
    $.each(lista_de_anuncios, function (index, anuncio) {
      ajax_requests.push(
        ConectarComAPI.get_dado_de_uma_entrega(anuncio.id, cep)
      );
    });

    $.when.apply(this, ajax_requests).done(function (data) {
      const args = Array.from(arguments);
      args.forEach(function (data, index) {
        args[index] = data[0];
      });
      callback(args);
    });
  }

  static get_dado_de_uma_entrega(id, cep) {
    return $.ajax({
      type: "GET",
      url: url_api_correios_entrega + id + url_api_correios_cep + cep,
      dataType: "json",
      error: function (xhr) {
        switch (xhr.status) {
          case 400:
            console.log("Erro: " + xhr.status + " - frete não encontrado.");
            break;
          case 404:
            console.log("Erro: " + xhr.status + " - página não encontrada");
            break;
        }
      },
    });
  }

  static get_dados_dos_anuncios(lista_de_anuncios, callback) {
    let ajax_requests = [];
    $.each(lista_de_anuncios, function (index, anuncio) {
      ajax_requests.push(ConectarComAPI.get_dado_de_um_anuncio(anuncio.id));
    });
    $.when.apply(this, ajax_requests).done(function (data) {
      const args = Array.from(arguments);
      args.forEach(function (data, index) {
        args[index] = data[0];
      });
      callback(args);
    });
  }

  static get_dado_de_um_anuncio(id) {
    return $.ajax({
      type: "GET",
      url: url_api_correios_entrega + id,
      dataType: "json",
      error: function (xhr) {
        switch (xhr.status) {
          case 400:
            console.log("Erro: " + xhr.status + " - frete não encontrado.");
            break;
          case 404:
            console.log("Erro: " + xhr.status + " - página não encontrada");
            break;
        }
      },
    });
  }

  static get_dados_dos_vendedores(lista_de_anuncios, callback) {
    let ajax_requests = [];
    $.each(lista_de_anuncios, function (index, anuncio) {
      ajax_requests.push(
        ConectarComAPI.get_dado_de_um_vendedor(anuncio.vendedor_id)
      );
    });
    $.when.apply(this, ajax_requests).done(function (data) {
      const args = Array.from(arguments);
      args.forEach(function (data, index) {
        args[index] = data[0];
      });
      callback(args);
    });
  }

  static get_dado_de_um_vendedor(id) {
    return $.ajax({
      type: "GET",
      url: url_api_correios_vendedor + id,
      dataType: "json",
      error: function (xhr) {
        switch (xhr.status) {
          case 400:
            console.log("Erro: " + xhr.status + " - frete não encontrado.");
            break;
          case 404:
            console.log("Erro: " + xhr.status + " - página não encontrada");
            break;
        }
      },
    });
  }
}

class TratamentoDeDados {
  static tratar_dados_das_entregas(lista_de_anuncios, raw_dados_das_entregas) {
    let dados_das_entregas = [];
    $.each(raw_dados_das_entregas, function (index, dados) {
      let anuncio = lista_de_anuncios[index];

      $.each(dados.options, function (i, opcao) {
        anuncio.opcoes_de_entrega = [];
        let envio = {};

        // informações sobre cada envio
        envio.preco = opcao.cost;
        envio.metodo_de_entrega = opcao.name;

        anuncio.opcoes_de_entrega.push(envio);
      });
      dados_das_entregas.push(anuncio);
    });
    return dados_das_entregas;
  }

  static tratar_dados_dos_anuncios(lista_de_anuncios, raw_dados_dos_anuncios) {
    let dados_dos_anuncios = [];
    $.each(raw_dados_dos_anuncios, function (index, dados) {
      let anuncio = lista_de_anuncios.find(
        (anuncio) => anuncio.id === dados.id
      );

      // informações sobre cada anuncio
      anuncio.preco = dados.price;
      anuncio.titulo = dados.title;
      anuncio.quantidade_disponivel = dados.available_quantity;
      anuncio.vendedor_id = dados.seller_id;

      // console.log(raw_dados_dos_anuncios);
      dados_dos_anuncios.push(anuncio);
    });
    return dados_dos_anuncios;
  }

  static tratar_dados_dos_vendedores(
    lista_de_anuncios,
    raw_dados_dos_vendedores
  ) {
    let dados_dos_anuncios = [];
    $.each(raw_dados_dos_vendedores, function (index, dados) {
      let anuncio = lista_de_anuncios[index];

      // informações sobre cada anuncio
      anuncio.nome_do_vendedor = "";

      console.log(dados);

      // console.log(raw_dados_dos_anuncios);
      dados_dos_anuncios.push(anuncio);
    });
    return dados_dos_anuncios;
  }
}

function main(cep) {
  //Verifica se o existe algum resultado na pagina, se não existir retorna
  if (!ColetarDaPagina.se_existe_anuncio()) {
    return false;
  }

  //Coletar informações de cada anúncio da pagina
  let lista_de_anuncios = ColetarDaPagina.get_ids_dos_resultados_da_busca();
  lista_de_anuncios = ColetarDaPagina.get_valor_total_parcelado_dos_resultados_da_busca(
    lista_de_anuncios
  );

  //Coletar dados dos anuncios pela API
  ConectarComAPI.get_dados_dos_anuncios(lista_de_anuncios, function (
    raw_dados_dos_anuncios
  ) {
    //Coletar dados das entregas pela API
    ConectarComAPI.get_dados_das_entregas(lista_de_anuncios, cep, function (
      raw_dados_das_entregas
    ) {
      //Coletar dados dos vendedores pela API
      ConectarComAPI.get_dados_dos_vendedores(lista_de_anuncios, function (
        raw_dados_dos_vendedores
      ) {
        lista_de_anuncios = TratamentoDeDados.tratar_dados_dos_anuncios(
          lista_de_anuncios,
          raw_dados_dos_anuncios
        );
        lista_de_anuncios = TratamentoDeDados.tratar_dados_das_entregas(
          lista_de_anuncios,
          raw_dados_das_entregas
        );
        lista_de_anuncios = TratamentoDeDados.tratar_dados_dos_vendedores(
          lista_de_anuncios,
          raw_dados_dos_vendedores
        );

        console.log(lista_de_anuncios);
      });
    });
  });

  //Renderizar tudo na tela
  Renderizar.valor_total_parcelado(lista_de_anuncios);

  //console.log(lista_de_anuncios);
}
